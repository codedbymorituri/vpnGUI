/*
vpnGUI - a basic front end for openVPN.
Written as part of a coding project for a Raspberry Pi.
Copyright (C) 2016 morituri
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see http://www.gnu.org/licenses.
 */

package vpnGUI;

import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultCaret;
import static javax.swing.text.DefaultCaret.ALWAYS_UPDATE;

/**
 *
 * @author codedbymorituri
 * 
 */

public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        initIcon();
        initTextArea();
        initComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonConnect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaLog = new javax.swing.JTextArea();
        jButtonDisconnect = new javax.swing.JButton();
        jButtonCheckIP = new javax.swing.JButton();
        jComboBoxConfigs = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("vpnGUI (v0.1.3)");
        setResizable(false);

        jButtonConnect.setText(" Connect ");
        jButtonConnect.setMaximumSize(new java.awt.Dimension(100, 29));
        jButtonConnect.setMinimumSize(new java.awt.Dimension(100, 29));
        jButtonConnect.setPreferredSize(new java.awt.Dimension(100, 29));
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setEnabled(false);
        jScrollPane1.setViewportView(jTextAreaLog);

        jButtonDisconnect.setText("Disconnect");
        jButtonDisconnect.setMaximumSize(new java.awt.Dimension(100, 29));
        jButtonDisconnect.setMinimumSize(new java.awt.Dimension(100, 29));
        jButtonDisconnect.setPreferredSize(new java.awt.Dimension(100, 29));
        jButtonDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDisconnectActionPerformed(evt);
            }
        });

        jButtonCheckIP.setText(" Check IP ");
        jButtonCheckIP.setMaximumSize(new java.awt.Dimension(100, 29));
        jButtonCheckIP.setMinimumSize(new java.awt.Dimension(100, 29));
        jButtonCheckIP.setPreferredSize(new java.awt.Dimension(100, 29));
        jButtonCheckIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckIPActionPerformed(evt);
            }
        });

        jComboBoxConfigs.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxConfigs.setMinimumSize(new java.awt.Dimension(250, 27));
        jComboBoxConfigs.setName(""); // NOI18N
        jComboBoxConfigs.setOpaque(false);
        jComboBoxConfigs.setPreferredSize(new java.awt.Dimension(250, 27));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBoxConfigs, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonConnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDisconnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(136, 136, 136)
                        .addComponent(jButtonCheckIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonConnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDisconnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCheckIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxConfigs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        Connect();
    }//GEN-LAST:event_jButtonConnectActionPerformed

    private void jButtonDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDisconnectActionPerformed
        Disconnect();
    }//GEN-LAST:event_jButtonDisconnectActionPerformed

    private void jButtonCheckIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckIPActionPerformed
        CheckIP();
    }//GEN-LAST:event_jButtonCheckIPActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCheckIP;
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JButton jButtonDisconnect;
    private javax.swing.JComboBox jComboBoxConfigs;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaLog;
    // End of variables declaration//GEN-END:variables

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private final String appPath = GUI.class.getProtectionDomain().getCodeSource().getLocation().getPath();
    private final String appFolder = appPath.substring(0, appPath.lastIndexOf('/')+1);
    private final String vpnFolder = "/etc/openvpn";
    private final String checkipPageSource = "http://checkip.dyndns.com";
    private final String ipRegex = "<body>(.+?)</body>";
    private final String userAgent = "Mozilla/5.0 (Windows NT 6.1; rv:54.0) Gecko/20100101 Firefox/54.0";
    private final String accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
    private String urlResponse = "";
    private String parseResult = "";
    private String writeResult = "";

    private void initIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Icon.png")));
    }//End Sub

    private void initTextArea() {
        DefaultCaret caret = (DefaultCaret) jTextAreaLog.getCaret();
        caret.setUpdatePolicy(ALWAYS_UPDATE);
    }

    private void initComboBox() {
        ArrayList<String> configsFound = new ArrayList<>();
        FileNameExtensionFilter extensionFilter = new FileNameExtensionFilter("ovpn files", "ovpn");
        final File file = new File(vpnFolder);
        for (final File child : file.listFiles()) {
            if(extensionFilter.accept(child)) {
                configsFound.add(child.getName());
            }
        }
        Collections.sort(configsFound);
        this.jComboBoxConfigs.setModel(new DefaultComboBoxModel(configsFound.toArray()));
    }

    private void Connect() {
        if (jComboBoxConfigs.getSelectedIndex() == -1) {
            return;
        }
        jButtonConnect.setEnabled(false);
        RunAsSuperUser runSudo = new RunAsSuperUser(this);
        Thread tConnect = new Thread() {
            public void run(){
                runSudo.SudoCommand("openvpn /etc/openvpn/" + jComboBoxConfigs.getSelectedItem().toString());  
            }
        };
        tConnect.start();
    }
    
    private void Disconnect() {
        RunAsSuperUser runSudo = new RunAsSuperUser(this);
        Thread tDisconnect = new Thread() {
            public void run(){
                runSudo.SudoCommand("killall -SIGINT openvpn"); 
                jButtonConnect.setEnabled(true);
            }
        };
        tDisconnect.start();
    }

    private void CheckIP() {
        Thread tCheckIP = new Thread() {
            public void run(){
                jButtonCheckIP.setEnabled(false);
                updateLog("\nGetting IP address...");
                if (GetPageSource(checkipPageSource)== true) {
                    ParsePageSource(urlResponse,ipRegex);
                    updateLog("\n" + parseResult + "\n");
                }
                else {
                    updateLog("\n" + urlResponse + "\n");
                }
                jButtonCheckIP.setEnabled(true);
            }
        };
        tCheckIP.start();  
    }
 
    private boolean GetPageSource(String pageURL) {
        urlResponse = "";
        StringBuffer responseReader = null; 
        try {
            URL pageSourceURL = new URL(pageURL);
            HttpURLConnection myConnection = (HttpURLConnection) pageSourceURL.openConnection();
            myConnection.setRequestMethod("GET");
            myConnection.setConnectTimeout(15*1000);
            myConnection.setInstanceFollowRedirects(true);
            myConnection.setRequestProperty("User-Agent", userAgent);       
            myConnection.setRequestProperty("Accept", accept); 
            BufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));
            String inputLine;
            responseReader = new StringBuffer();
            while ((inputLine = myReader.readLine()) != null) {
                responseReader.append("\n");
                responseReader.append(inputLine);
            }
            myReader.close();
            urlResponse = responseReader.toString();
            myConnection.disconnect();
        } 
        catch (Exception ex) {
            urlResponse = ex.getMessage();
            return false;
        }
        return true;
    }
    
    private boolean ParsePageSource(String source, String regexPattern) {
        parseResult = "";
        try {
            Pattern regex = Pattern.compile(regexPattern, Pattern.DOTALL);
            Matcher regexMatcher = regex.matcher(source);
            if (regexMatcher.find()) {
		parseResult = regexMatcher.group(1);
            } 
            else {
                parseResult = "Nothing found";
                return false;
            }
        }
        catch (PatternSyntaxException ex) {
            parseResult = ex.getMessage();
            return false;
        }    
        return true;
    }

    public void updateLog(String data) {
        jTextAreaLog.append(data);    
    } 
    
}//end class    
    
    











